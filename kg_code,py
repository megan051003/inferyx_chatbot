import os
import asyncio
import json
from dotenv import load_dotenv
from langchain_groq import ChatGroq
from langchain_core.documents import Document
from langchain_experimental.graph_transformers import LLMGraphTransformer
from langchain_community.graphs import Neo4jGraph

# Load environment variables
load_dotenv("/app/framework/test/env.txt")
GROQ_API_KEY = os.getenv("GROQ_API_KEY")

llm = ChatGroq(
    api_key=GROQ_API_KEY,
    model_name="llama3-8b-8192",
    temperature=0.5,
)

transformer = LLMGraphTransformer(llm=llm)

# Neo4j connection
graph = Neo4jGraph(
    url="neo4j://65.1.212.204:7687",
    username="neo4j",
    password="20Inferyx!9"
)

# Example: Convert database schema into a Document
def get_database_schema_as_text(database_name):
    import mysql.connector
    schema_text = f"Schema for database `{database_name}`:\n"
    conn = mysql.connector.connect(
        host="localhost", user="inferyx", password="inferyx", database=database_name
    )
    cursor = conn.cursor()
    cursor.execute("SHOW TABLES;")
    tables = [row[0] for row in cursor.fetchall()]
    for table in tables:
        cursor.execute(f"SHOW COLUMNS FROM {table};")
        columns = [col[0] for col in cursor.fetchall()]
        schema_text += f"\nTable `{table}`:\n  " + ", ".join(columns)
    cursor.close()
    conn.close()
    return schema_text

async def main():
    db_name = "your_database"
    schema_text = get_database_schema_as_text(db_name)

    print("âœ… Got schema. Converting to graph...")
    doc = Document(page_content=schema_text)

    graph_docs = await transformer.aconvert_to_graph_documents([doc])

    print(f"ðŸ“¦ Storing {len(graph_docs)} document(s) to Neo4j...")
    graph.add_graph_documents(graph_docs, baseEntityLabel=True)
    print("âœ… Done. View in Neo4j Browser!")

asyncio.run(main())
